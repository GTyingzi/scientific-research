%初始数据，历时 452.128370 秒。
clear;clc
tic
global w          %%定义全局变量w
global a;         %%定义全局变量a
N=150000;h=0.01;  %%迭代N次，步长h；
w=1.0;

iter=1;
for a=0.15:0.001:0.25   %对a，间隔0.001进行迭代
    
x=zeros(1,N);y=zeros(1,N);z=zeros(1,N);   %%提前分配内存空间
x(1)=rand;y(1)=10*rand;z(1)=rand;  %设定初始点
    
%四阶Runge-Kutta算法
for i=1:N
    x_k1=f_dx(y(i),z(i));
    y_k1=f_dy(x(i),y(i));
    z_k1=f_dz(x(i),z(i));
    
    x_k2=f_dx(y(i)+h/2*y_k1,z(i)+h/2*z_k1);
    y_k2=f_dy(x(i)+h/2*x_k1,y(i)+h/2*y_k1);
    z_k2=f_dz(x(i)+h/2*x_k1,z(i)+h/2*z_k1);
    
    x_k3=f_dx(y(i)+h/2*y_k2,z(i)+h/2*z_k2);
    y_k3=f_dy(x(i)+h/2*x_k2,y(i)+h/2*y_k2);
    z_k3=f_dz(x(i)+h/2*x_k1,z(i)+h/2*z_k2);
    
    x_k4=f_dx(y(i)+h*y_k3,z(i)+h*z_k3);
    y_k4=f_dy(x(i)+h*x_k3,y(i)+h*y_k3);
    z_k4=f_dz(x(i)+h*x_k3,z(i)+h*z_k3);
    
    x(i+1)=x(i)+h/6*(x_k1+2*x_k2+2*x_k3+x_k4);
    y(i+1)=y(i)+h/6*(y_k1+2*y_k2+2*y_k3+y_k4);
    z(i+1)=z(i)+h/6*(z_k1+2*z_k2+2*z_k3+z_k4);
end

%丢弃前clear_N个数据点后进行差分
clear_N=10000;
x(1:clear_N)=[];y(1:clear_N)=[];z(1:clear_N)=[];
delta_x=diff(x);delta_y=diff(y);delta_z=diff(z);
m=length(delta_x);

%记录π序数
pai_xushu=cell(1,m);              %%直观显示对应的π模式
digit_xushu=zeros(1,m);           %%编程序简易，以1->π1,2->π2，…，n->πn
for i=1:m                         %%得到m个π序数
    if delta_x(i)>=0 && delta_y(i)>=0 && delta_z(i)>=0
        pai_xushu{i}='π1';
        digit_xushu(i)=1;
    elseif delta_x(i)>=0 && delta_y(i)>=0 && delta_z(i)<0
        pai_xushu{i}='π2';
        digit_xushu(i)=2;
    elseif delta_x(i)>=0 && delta_y(i)<0 && delta_z(i)>=0
        pai_xushu{i}='π3';
        digit_xushu(i)=3;
    elseif delta_x(i)>=0 && delta_y(i)<0 && delta_z(i)<0
        pai_xushu{i}='π4';
        digit_xushu(i)=4;
    elseif delta_x(i)<0 && delta_y(i)>=0 && delta_z(i)>=0
        pai_xushu{i}='π5';
        digit_xushu(i)=5;
    elseif delta_x(i)<0 && delta_y(i)>=0 && delta_z(i)<0
        pai_xushu{i}='π6';
        digit_xushu(i)=6;
    elseif delta_x(i)<0 && delta_y(i)<0 && delta_z(i)>=0
        pai_xushu{i}='π7';
        digit_xushu(i)=7;
    else
        pai_xushu{i}='π8';
        digit_xushu(i)=8;
    end
end

%计算记录π模式概率p(πi)及其相应的熵值Ho
pai_count=zeros(1,8);
for i=1:m
    for j=1:8
    if digit_xushu(i) == j
        pai_count(j)=pai_count(j)+1;   %%记录对应πi出现的个数
    end    
    end
end

P(:,iter)=pai_count/sum(pai_count);   %%获得每个πi占总体的比例
P(find(P(:,iter)==0),iter)=1;     %%消除概率为0取歧义对数的情况，log2(1)=0,不影响最后熵值结果
Ho(iter)=0;
for j=1:8
    Ho(iter)=Ho(iter)-P(j,iter)*log2(P(j,iter));
end
P(find(P(:,iter)==1),iter)=0;     %%复原

%计算π模式的转化概率以及HT
pai_ij_count=zeros(8,8);
for k=1:m-1
    for i=1:8
        for j=1:8
            if digit_xushu(k) == i && digit_xushu(k+1) == j  %%如果第k个π模式为πi,第k+1个π模式为πj
                pai_ij_count(i,j)=pai_ij_count(i,j)+1;       %%则在第i行第j列+1。最后可得到转移数量矩阵。
            end
        end
    end
end
P_ij=pai_ij_count/sum(sum(pai_ij_count));          %%获得每个πi->πj的转移概率
P_ij(find(P_ij==0))=1;               %%消除概率为0取歧义对数的情况，log2(1)=0,不影响最后熵值结果
HT(iter)=0;
for i=1:8
    for j=1:8
        HT(iter)=HT(iter)-P_ij(i,j)*log2(P_ij(i,j));
    end
end
P_ij(find(P_ij==1))=0;     %%复原

%去除自环后的概率及Ht
pai_ij_count_2=pai_ij_count-diag(diag(pai_ij_count));   %%对角线置0，去除自环现象
P_ij_2=pai_ij_count_2/sum(sum(pai_ij_count_2));         %%余下进行归一化得其转移概率
P_ij_2(find(P_ij_2==0))=1;            %%消除概率为0取歧义对数的情况，log2(1)=0,不影响最后熵值结果
HT_2(iter)=0;
for i=1:8
    for j=1:8
        HT_2(iter)=HT_2(iter)-P_ij_2(i,j)*log2(P_ij_2(i,j));
    end
end
P_ij_2(find(P_ij_2==1))=0;     %%复原

%记录相干指数
XX=digit_xushu;
YY=hilbert(XX);
YY=imag(YY);
z=atan(XX./YY);
Dz=diff(z);
CI(iter)=sum(Dz<0)/length(Dz);

iter=iter+1;
end

%%绘图区
figure(1)

mm=0.15:0.001:0.25;    %%画图所需对应x轴
subplot(3,1,1);
plot(mm,P(1,:),'b*-');hold on;
plot(mm,P(2,:),'g*-');hold on;
plot(mm,P(3,:),'r*-');hold on;
plot(mm,P(4,:),'c*-');hold on;
plot(mm,P(5,:),'m*-');hold on;
plot(mm,P(6,:),'y*-');hold on;
plot(mm,P(7,:),'k*-');hold on;
plot(mm,P(8,:),'w*-');hold off;
ylabel('f(π_i)');
% h1=legend('π_1','π_2','π_3','π_4','π_5','π_6','π_7','π_8');
% set(h1,'Orientation','horizon');
% set(h1,'Box','off');

subplot(3,1,2);
[AX,H1,H2]=plotyy(mm,Ho,mm,HT,'plot');    %%设置双坐标
HH1=get(AX(1),'Ylabel');                  %%设置图例
set(HH1,'String','H_o');                  %%设置图例
HH2=get(AX(2),'Ylabel');
set(HH2,'String','H_T');

subplot(3,1,3)
plot(mm,CI,'-');
ylabel('CI');

toc

%由公式4所得函数
function f=f_dx(y,z)      %%dx/dt
global w
f=-w*y-z;
end

function f=f_dy(x,y)      %%dy/dt
global w
global a
f=w*x+a*y;
end

function f=f_dz(x,z)      %%dz/dt
f=0.4+z*(x-8.5);
end